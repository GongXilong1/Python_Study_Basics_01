class A:
    def __init__(self):
        self.num1 = 100
        self.__num2 = 200

    def __test(self):
        print("私有方法 %d %d" % (self.num1, self.__num2))

    def test(self):
        print("父类的公有方法 %d" % self.__num2)  # 在父类公有方法中访问父类的私有属性

        self.__test()  # 在父类公有方法中调用父类的私有方法


class B(A):
    def demo(self):
        # 1. 尝试直接访问父类的私有属性
        # print("访问父类的私有属性 %d" % self.__num2)  # 在子类的方法中不能直接访问父类的私有属性

        # 2. 尝试直接调用父类的私有方法
        # self.__test()  # 在子类的对象方法中不能直接调用父类的私有方法

        # 3. 访问父类的公有属性
        print("子类方法 %d" % self.num1)
        # 结论：子类对象可以直接访问父类的公有属性。
        # 结论：子类对象可以通过访问父类的公有属性的方式间接地访问父类的私有属性。

        # 4. 调用父类的公有方法
        self.test()
        # 结论：子类对象可以直接调用父类的公有方法。
        # 结论：子类对象可以通过调用父类的公有方法的方式间接地调用父类的私有方法。


# 创建一个子类对象
b = B()
print(b)
# 在外界不能直接访问对象的私有属性/调用私有方法。
# print(b.__num2)  # 运行后有报错
# b.__test()  # 运行后有报错

b.demo()


# 在外界访问父类的公有属性/调用公有方法
# print(b.num1)
# b.test()



